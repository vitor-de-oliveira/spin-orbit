- improve resonance calculation for periodic orbits

- when the resonance is being calculated for p.o.same
use it as a reference to identify data file names. along with
stability more along the way

- maybe change argument of basin of attraction function to
a member of periodic orbit structure. Also do this to evolve_basin

- move resonance calculation from trace 
orbit to future periodic orbit function

- I have to put initial condition info on orbit!!
 then change the draw orbit on phase space stuff

- move time series to tests. Or rather, transform time series
to a drawing of orbits only

- maybe use a different software than gnuplot to fit histogram and fit cuvers
 perhaps matlab or python. No caso de python, criar um projeto
 aqui dentro chamado python_tools

- talvez fazer uma pasta de figuras / exemplos e subir no github

- Make an init for the parameters of Hyperion and so on

- Use terminal eps in scripts and pipes (or both versions on pipe and script)

- think of a good way to store the results. maybe dropbox or drive.

- think of a good way to organize the data. config file
along with another dir with figures and raw data.
Perhaps, due to the existence of a config file, just
put the date on the file name.
Maybe write a print_config_file function which would
be called along with the gnuplot pipe. Include execution time
somehow

- pesquisar e adicionar, se houver, a verificação no erro de 
alguma grandeza que envolva a parte rotacional do problema

- pegar os tempos reais no integrador? multiplicar pelo passo?

- maybe remove two-body system

- adaptar a parte orbital nas funcoes de traco de orbita
e espaco de fases para quando for usar campos dissipativos
pois eles nao vao se chamar rigid. Isto é, usar a dimensão

- understand how the specific values to the moon (or any other)
satellite comes into play in the initial conditions. There are
also the masses. Alterar a funcao init_orbital em dynamical_systems
de acordo. Olhar Murray chap 2
- stabilish the right values for G and m. Como adimensionalizar
as massas, tendo em mente que existe a parte orbital e a parte
do spin e um usa a soma das massas e o outro a massa do primario
A eq do artigo do wisdom é diferente da do projeto. Pela 3a lei
de kepler, dá para mostrar que elas são idênticas, exceto pela 
presença da massa do secundário
- checar se o período deveria ser sempre 2pi e o eixo maior
a igual a 1.

- implement automan. Maybe put everything regarding automan in
the same place and call it. Look at the UPO calculator in the
Vitor-David folder in Dropbox. maybe upo_calc.h and manifolds.h
and write somewhere that these are forks from automan.h. No 
manifolds.h, colocar um check function para verificar se a 
orbita passada para o programa representa uma orbita periodica
para uma certa tolerancia

- no futuro, mover as funções evolve_cycle e evolve_orbit
para dentro da struct de analise no dynamical system e criar
vetores de funções para  trace_orbit_map e draw_phase_space,
as quais apontarão para funções definidas em libs externas
como a spin_orbit.h. Isso deixará o programa bem mais geral.
Nesse caso, será necessário entender ``this" em c

- make modules for the program. Maybe using switch, maybe
using the makefile itself

- Talvez, mais para frente, deixar o ponteiro params mais
especifico para cada caso, associando quais valores entram
lah e em qual posicao com os campos vetoriais, ajustando
eles no init. Isso vai deixar o programa como um todo bem
mais generico

- maybe, in the future, use heap memory for everything